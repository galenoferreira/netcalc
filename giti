#!/usr/bin/env bash
set -euo pipefail

# Remember current directory;
CUR_DIR=$(pwd)
# Change to repository directory (ensure REP_DIR is set or use current)
cd "${REP_DIR:-$CUR_DIR}" || exit 1

# Fetch all tags from origin to ensure we have the latest versions
git fetch --tags origin

# Determine the highest existing version tag (vMAJOR.MINOR.PATCH)
LAST_TAG=$(git tag --list 'v*' | sort -V | tail -n1)
if [[ -z "$LAST_TAG" ]]; then
  LAST_TAG="v0.0.0"
fi

# Strip leading 'v' and split into components
VER=${LAST_TAG#v}
IFS='.' read -r MAJOR MINOR PATCH <<< "$VER"

# Increment patch version for the new tag
PATCH=$((PATCH + 1))
NEW_TAG="v${MAJOR}.${MINOR}.${PATCH}"

# Record the new tag in .giti_tag (append to preserve history)
echo "$NEW_TAG" >> .giti_tag

# Prepare prefix for commit message
PREFIX="[$NEW_TAG]"


# Show diff
echo
git diff

# Read commit message from user
# shellcheck disable=SC2162
read -p "Commit Message: " MSG

# Prefix the commit message
COMMIT_MSG="$PREFIX $MSG"

# Stage all changes
git add .


# Na raiz do reposit√≥rio local;
gh release create "$NEW_TAG" \
  --title "$COMMIT_MSG"

# Upload each binary file in the bin subdirectories
for artifact in bin/*/*; do
  [ -f "$artifact" ] && gh release upload "$NEW_TAG" "$artifact" --clobber
done

# Ensure we are on the master branch
git checkout master

# Create and push the new tag on master branch;
git tag "$NEW_TAG" master
git commit -m "$COMMIT_MSG"
# git push origin --tags
git push origin master

# Return to original directory
cd "$CUR_DIR" || exit 1