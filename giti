#!/usr/bin/env bash
set -euo pipefail

# Remember current directory;
CUR_DIR=$(pwd)
# Change to repository directory (ensure REP_DIR is set or use current)

cd "${REP_DIR:-$CUR_DIR}" || exit 1

# Commit and push any workflow updates without triggering Actions
if git diff --quiet .github/workflows/main.yml; then
  echo "No workflow changes to commit."
else
  git add .github/workflows/main.yml
  git commit -m "[skip ci] chore: update main workflow"
  git push origin main
fi

./build

# Ensure .giti_tag exists with initial tag v1.1.01
if [[ ! -f .giti_tag ]]; then
  echo "v1.1.01" > .giti_tag
fi

# Read the last tag from .giti_tag
LAST_TAG=$(tail -n1 .giti_tag)

# Strip leading 'v' and split into components
VER=${LAST_TAG#v}
IFS='.' read -r MAJOR MINOR PATCH <<< "$VER"

# Increment patch with carry at 99
PATCH=$((10#$PATCH + 1))
if (( PATCH > 99 )); then
  PATCH=1
  MINOR=$((10#$MINOR + 1))
  if (( MINOR > 99 )); then
    MINOR=1
    MAJOR=$((10#$MAJOR + 1))
  fi
fi

# Format components to two-digit patch
printf -v PATCH "%02d" "$PATCH"

# Construct new tag
NEW_TAG="v${MAJOR}.${MINOR}.${PATCH}"


# Prepare prefix for commit message
PREFIX="[$NEW_TAG]"


# Show diff
echo
git diff

# Read commit message from user
# shellcheck disable=SC2162
read -p "Commit Message: " MSG

# Prefix the commit message
COMMIT_MSG="$PREFIX $MSG"

# Stage all changes
git add .


# Na raiz do repositÃ³rio local;
gh release create "$NEW_TAG" \
  --title "$COMMIT_MSG"

# Upload each binary file in the bin subdirectories with unique asset names
for artifact in bin/*/*; do
  if [ -f "$artifact" ]; then
    dir_name=$(basename "$(dirname "$artifact")")
    base_name=$(basename "$artifact")
    asset_name="${dir_name}-${base_name}"
    gh release upload "$NEW_TAG" "$artifact" --clobber
  fi
done

# Ensure we are on the main branch
git checkout main

# Create and push the new tag on main branch;
git tag "$NEW_TAG" main
git commit -m "$COMMIT_MSG"
# git push origin --tags

git push origin main

# Record the new tag in .giti_tag (append to preserve history)
echo "$NEW_TAG" >> .giti_tag

# Return to original directory
cd "$CUR_DIR" || exit 1
