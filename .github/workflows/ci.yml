# Name of the workflow that appears in GitHub Actions UI
name: CI / CD Pipeline

# Grant write permissions to the GITHUB_TOKEN for creating releases
permissions:
  contents: write

# Define when this workflow will run
on:
  push:
    branches:
      - master    # Run on pushes to master branch
    tags:
      - 'v*'     # Run on version tags (e.g., v1.0.0)
  workflow_dispatch:  # Allow manual triggering of the workflow

jobs:
  # Lint job: Runs code quality checks
  lint:
    # Skip on tag pushes (only run on branch pushes)
    if: "!startsWith(github.ref, 'refs/tags/')"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3  # Checkout the repository code

      # Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      # Run golangci-lint with specified version and config
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: v1.64.8
          config: .golangci.yml

  # Test job: Runs unit tests and uploads coverage
  test:
    if: "!startsWith(github.ref, 'refs/tags/')"
    runs-on: ubuntu-latest
    needs: lint  # Wait for lint job to complete
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      # Ensure dependencies are up to date
      - name: Download dependencies
        run: go mod tidy

      # Cache Go modules to speed up builds
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # Run tests with verbose output
      - name: Run tests
        run: go test ./... -v

      # Generate coverage report
      - name: Run coverage
        run: go test ./... -coverprofile=coverage.out

      # Upload coverage to Codecov
      - name: Upload coverage to Codecov
        run: |
          curl -s https://codecov.io/bash | bash -s -- -t ${{ secrets.CODECOV_TOKEN }} -f coverage.out

  # Build job: Compiles binaries for multiple platforms
  build:
    needs: [lint, test]  # Wait for both lint and test jobs
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Build for multiple OS and CPU architectures
        os: [windows-latest, ubuntu-latest, macos-latest]
        arch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Download dependencies
        run: go mod tidy

      # Cache Go modules
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # Cross-compile for each OS/architecture combination
      - name: Build binary
        run: |
          GOOS=${{ matrix.os == 'windows-latest' && 'windows' || (matrix.os == 'macos-latest' && 'darwin' || 'linux') }} \
          GOARCH=${{ matrix.arch }} \
          go build -ldflags="-X main.buildTime=$(date -u '+%Y-%m-%dT%H:%M:%SZ') -X main.gitCommit=$(git rev-parse --short HEAD) -X main.gitBranch=$(git rev-parse --abbrev-ref HEAD)" \
            -o "bin/${{ matrix.os }}_${{ matrix.arch }}/netcalc${{ matrix.os == 'windows-latest' && '.exe' || '' }}" netcalc.go

      # Save compiled binaries as artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: netcalc-${{ matrix.os }}-${{ matrix.arch }}
          path: bin/${{ matrix.os }}_${{ matrix.arch }}/

  # Release job: Creates GitHub release when a version tag is pushed
  release-on-tag:
    needs: build  # Wait for build job to complete
    if: startsWith(github.ref, 'refs/tags/')  # Only run on version tags
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Create a new GitHub release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      # Upload Windows AMD64 binary
      - name: Upload Release Assets (windows-amd64)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: bin/windows-latest_amd64/netcalc.exe
          asset_name: netcalc-windows-amd64.exe
          asset_content_type: application/octet-stream

      # Upload Linux AMD64 binary
      - name: Upload Release Assets (linux-amd64)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: bin/ubuntu-latest_amd64/netcalc
          asset_name: netcalc-linux-amd64
          asset_content_type: application/octet-stream

      # Upload macOS AMD64 binary
      - name: Upload Release Assets (macos-amd64)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: bin/macos-latest_amd64/netcalc
          asset_name: netcalc-macos-amd64
          asset_content_type: application/octet-stream

      # Upload macOS ARM64 binary
      - name: Upload Release Assets (macos-arm64)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: bin/macos-latest_arm64/netcalc
          asset_name: netcalc-macos-arm64
          asset_content_type: application/octet-stream
# CI / CD Pipeline for netcalc
name: CI / CD Pipeline

# Allow workflow on pushes to master branch, version tags, and manual triggers
on:
  push:
    branches:
      - master
    tags:
      - 'v*'
  workflow_dispatch:

# Grant write access to GitHub token for release creation
permissions:
  contents: write

jobs:
  # ---------------------------------------------------------------------------
  # Lint job: checks Go code quality via golangci-lint
  # ---------------------------------------------------------------------------
  lint:
    # Only run on branch pushes, skip tag-triggered runs
    if: "!startsWith(github.ref, 'refs/tags/')"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Go environment
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: v1.64.8
          config: .golangci.yml

  # ---------------------------------------------------------------------------
  # Test job: runs unit tests and uploads code coverage
  # ---------------------------------------------------------------------------
  test:
    if: "!startsWith(github.ref, 'refs/tags/')"
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Go environment
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Download dependencies
        run: go mod tidy

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run tests with verbose output
        run: go test ./... -v

      - name: Generate coverage profile
        run: go test ./... -coverprofile=coverage.out

      - name: Upload coverage report to Codecov
        # Use bash uploader with repository token to avoid rate limits
        run: |
          curl -s https://codecov.io/bash | bash -s -- \
            -t ${{ secrets.CODECOV_TOKEN }} \
            -f coverage.out

  # ---------------------------------------------------------------------------
  # Build job: compiles binaries for Windows, Linux, and macOS (amd64 & arm64)
  # ---------------------------------------------------------------------------
  build:
    needs: [lint, test]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        arch: [amd64, arm64]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Go environment
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Download dependencies
        run: go mod tidy

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Cross-compile binary
        run: |
          # Determine GOOS and GOARCH based on matrix
          GOOS=$(
            if [ "${{ matrix.os }}" = "windows-latest" ]; then
              echo windows
            elif [ "${{ matrix.os }}" = "macos-latest" ]; then
              echo darwin
            else
              echo linux
            fi
          )
          GOARCH=${{ matrix.arch }}
          # Build with version metadata via ldflags
          go build \
            -ldflags="-X main.buildTime=$(date -u '+%Y-%m-%dT%H:%M:%SZ') \
                      -X main.gitCommit=$(git rev-parse --short HEAD) \
                      -X main.gitBranch=$(git rev-parse --abbrev-ref HEAD')" \
            -o "bin/${{ matrix.os }}_${{ matrix.arch }}/netcalc${{ matrix.os == 'windows-latest' && '.exe' || '' }}" \
            netcalc.go

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: netcalc-${{ matrix.os }}-${{ matrix.arch }}
          path: bin/${{ matrix.os }}_${{ matrix.arch }}/

  # ---------------------------------------------------------------------------
  # Release job: creates a GitHub release on version tag
  # ---------------------------------------------------------------------------
  release-on-tag:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ github.ref_name }}
          release_name: "Release ${{ github.ref_name }}"
          draft: false
          prerelease: false

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: bin/windows-latest_amd64/netcalc.exe
          asset_name: netcalc-windows-amd64.exe
          asset_content_type: application/octet-stream

      - name: Upload release assets (linux-amd64)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: bin/ubuntu-latest_amd64/netcalc
          asset_name: netcalc-linux-amd64
          asset_content_type: application/octet-stream

      - name: Upload release assets (macos-amd64)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: bin/macos-latest_amd64/netcalc
          asset_name: netcalc-macos-amd64
          asset_content_type: application/octet-stream

      - name: Upload release assets (macos-arm64)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: bin/macos-latest_arm64/netcalc
          asset_name: netcalc-macos-arm64
          asset_content_type: application/octet-stream