name: CI / CD Pipeline

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  lint:
    if: "!startsWith(github.ref, 'refs/tags/')"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Install golangci-lint
        run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

      - name: Run golangci-lint
        run: golangci-lint run --config .golangci.yml ./...

  # 1) Testes unitários
  test:
    if: "!startsWith(github.ref, 'refs/tags/')"
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Download dependencies
        run: go mod tidy

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run tests
        run: go test ./... -v

      - name: Run coverage
        run: go test ./... -coverprofile=coverage.out

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: coverage.out
          fail_ci_if_error: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # 2) Build multiplataforma
  build:
    if: "!startsWith(github.ref, 'refs/tags/')"
    needs: [lint, test]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        arch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
      - name: Download dependencies
        run: go mod tidy
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Build binary
        run: |
          GOOS=${{ matrix.os == 'windows-latest' && 'windows' || (matrix.os == 'macos-latest' && 'darwin' || 'linux') }} \
          GOARCH=${{ matrix.arch }} \
          go build -o "bin/${{ matrix.os }}_${{ matrix.arch }}/netcalc${{ matrix.os == 'windows-latest' && '.exe' || '' }}" netcalc.go
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: netcalc-${{ matrix.os }}-${{ matrix.arch }}
          path: bin/${{ matrix.os }}_${{ matrix.arch }}/

  # 3) Release automático em push de tag
  release-on-tag:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload Release Assets (windows-amd64)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: bin/windows-latest_amd64/netcalc.exe
          asset_name: netcalc-windows-amd64.exe
          asset_content_type: application/octet-stream
      - name: Upload Release Assets (linux-amd64)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: bin/ubuntu-latest_amd64/netcalc
          asset_name: netcalc-linux-amd64
          asset_content_type: application/octet-stream
      - name: Upload Release Assets (macos-amd64)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: bin/macos-latest_amd64/netcalc
          asset_name: netcalc-macos-amd64
          asset_content_type: application/octet-stream
      - name: Upload Release Assets (macos-arm64)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: bin/macos-latest_arm64/netcalc
          asset_name: netcalc-macos-arm64
          asset_content_type: application/octet-stream