# GitHub Actions workflow for CI/CD of the netcalc project.
# This pipeline lints, tests, builds, and releases the application.

name: CI / CD Pipeline

# Workflow triggers:
#  - push of any tag matching v* to trigger build and release
#  - manual dispatch via the GitHub UI
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

# Grant write access to repository contents for creating releases
permissions:
  contents: write

# Define the sequence of jobs: lint, test, build, then release-on-tag
jobs:
  # ---------------------------------------------------------------------------
  # Lint job: runs static analysis and code style checks on Go code
  # Only executes on pushes that are not tag events.
  # ---------------------------------------------------------------------------
  lint:
    if: "!startsWith(github.ref, 'refs/tags/')"
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository to the runner
      - name: Checkout code
        uses: actions/checkout@v4

      # Install and configure the specified Go version
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.20'

  # ---------------------------------------------------------------------------
  # Test job: runs unit tests and generates coverage report
  # Depends on successful lint job; skips on tag pushes.
  # ---------------------------------------------------------------------------
  test:
    if: "!startsWith(github.ref, 'refs/tags/')"
    needs: lint
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository to the runner
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      # Install and configure the specified Go version
      - name: Set up Go
        uses: actions/setup-go@v5.5.0
        with:
          go-version: '1.20'

      - name: Install dependencies
        run: go mod tidy

      - name: Cache Go modules
        uses: actions/cache@v4.2.3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Run tests
        run: go test ./... -v

      - name: Generate coverage
        run: go test ./... -coverprofile=coverage.out

  # ---------------------------------------------------------------------------
  # Build job: cross-compile binaries for Windows, Linux, and macOS
  # Runs only when a version tag is pushed.
  # ---------------------------------------------------------------------------
  build:
    needs: [ lint, test ]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ windows-latest, ubuntu-latest, macos-latest ]
        arch: [ amd64, arm64 ]
    steps:
      # Checkout the repository to the runner
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      # Install and configure the specified Go version
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.20'

      - name: Install dependencies
        run: go mod tidy

      - name: Cache Go modules
        uses: actions/cache@v4.2.3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Cross-compile binary
        run: |
          # Determine target OS based on matrix value
          GOOS=$(
            if [ "${{ matrix.os }}" = "windows-latest" ]; then
              echo windows
            elif [ "${{ matrix.os }}" = "macos-latest" ]; then
              echo darwin
            else
              echo linux
            fi
          )
          GOARCH=${{ matrix.arch }}
          # Build with version metadata via ldflags
          go build \
            -ldflags="-X main.buildTime=$(date -u '+%Y-%m-%dT%H:%M:%SZ') \
                      -X main.gitCommit=$(git rev-parse --short HEAD) \
                      -X main.gitBranch=$(git rev-parse --abbrev-ref HEAD)" \
            -o "bin/${{ matrix.os }}_${{ matrix.arch }}/netcalc${{ matrix.os == 'windows-latest' && '.exe' || '' }}" \
            netcalc.go

      # Upload compiled binaries as build artifacts / release assets
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: netcalc-${{ matrix.os }}-${{ matrix.arch }}
          path: bin/${{ matrix.os }}_${{ matrix.arch }}/

  # ---------------------------------------------------------------------------
  # Release job: creates a GitHub Release and uploads compiled binaries
  # Only executes on version tag pushes after build job completes.
  # ---------------------------------------------------------------------------
  release-on-tag:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository to the runner
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      # Create a new GitHub release for the pushed tag
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        with:
          # noinspection UndefinedParamsPresent
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ github.ref_name }}
          release_name: "Release ${{ github.ref_name }}"
          draft: false
          prerelease: false

      # Upload compiled binaries as build artifacts / release assets
      - name: Upload Windows artifact
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: bin/windows-latest_amd64/netcalc.exe
          asset_name: netcalc-windows-amd64.exe
          asset_content_type: application/octet-stream

      - name: Upload Linux artifact
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: bin/ubuntu-latest_amd64/netcalc
          asset_name: netcalc-linux-amd64
          asset_content_type: application/octet-stream

      - name: Upload macOS AMD64 artifact
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: bin/macos-latest_amd64/netcalc
          asset_name: netcalc-macos-amd64
          asset_content_type: application/octet-stream

      - name: Upload macOS ARM64 artifact
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: bin/macos-latest_arm64/netcalc
          asset_name: netcalc-macos-arm64
          asset_content_type: application/octet-stream